Вариант: Булавко Костянтин Михайлович	1
Задание: У кожному рядку матриці A знайти найменший елемент і поміняти його місцями
з першим елементом рядка. Визначити рядок, в якому перший елемент є
найбільшим серед перших елементів інших рядків, переписати його елементи в
одновимірний масив B та інвертувати порядок їх розташування.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            // Создание Матрицы А
            int cols;
            int[,] A;
            Create_Martix_A(out cols, out A);

            // Вывод Матрицы А
            Output_Matrix_A(A);

            // Меняем местами максимальный элемент с первым
            Swap(A);

            // Вывод матрицы A, после перестановки элементов местами
            Output_Matrix_A(A);

            // Визначити рядок, в якому перший елемент є найбільшим серед перших елементів інших рядків
            int arI = Max_Elm_In_String(A);

            // Переписываем элементы сроки в новый массив B
            int[] B = Copy_Elm_In_Martix_B(cols, A, arI);

            // Вывод одномерного массива B
            Output_Matrix_B(B);

            // Инвертируем массив B
            Array.Reverse(B);
            Console.WriteLine("\n");

            // Вывод матрицы B после инвертирования
            Reverse_Matrix_B(B);
            Console.ReadLine();
        }
        private static void Create_Martix_A(out int cols, out int[,] A)
        {
            int rows; // rows-рядки cols-стовпчики

            // Задаем размерность матрице А
            Console.WriteLine("Введiть кiлькiсть рядкiв i стовпчикiв матрицi:");
            rows = int.Parse(Console.ReadLine());
            cols = int.Parse(Console.ReadLine());
            A = new int[rows, cols];


            //Заполнение матрицы А рандомом
            Random RndGen = new Random();
            for (int i = 0; i < A.GetLength(0); i++)
            {
                for (int j = 0; j < A.GetLength(1); j++)
                {
                    A[i, j] = RndGen.Next(100);
                }
            }
        }

        private static void Output_Matrix_A(int[,] A)
        {
            //Вывод матрицы А на экран
            Console.WriteLine("Вмiст матрицi A:");
            for (int i = 0; i < A.GetLength(0); i++)
            {
                for (int j = 0; j < A.GetLength(1); j++)
                {
                    Console.Write("{0, 4}", A[i, j]);
                }
                Console.WriteLine();
            }
        }

        private static void Swap(int[,] A)
        {
            //Найти минимальний элемент и поменять его местами с первым элементом РЯДКА.
            int min = 9999;
            int imin = -10;

            int mini = 1; int minj = 1; //mini  / минимальное число
            int first_elm_i = 1; int first_elm_j = 1; // first_elm_ / первый элемент 

            int temp = 0; // доп.переменная для обмена значений
            for (int i = 0; i < A.GetLength(0); i++)
            {
                for (int j = 0; j < A.GetLength(1); j++)
                {
                    //Нахождение первого элемента
                    int num_0 = 999; // - Значение первого элемента
                    if (j == 0)
                    {
                        num_0 = A[i, j];

                        first_elm_i = i;
                        first_elm_j = j;
                    }

                    // Нахождение мин.элемента и индекст мин. элемента
                    if (min > A[i, j])
                    {
                        min = A[i, j];
                        imin = j;

                        // Запоминание индк. мин. элм. для обмена значений 
                        mini = i;
                        minj = j;
                    }
                }
                // Меняет местами первый элемент с минимальный элементом
                temp = A[first_elm_i, first_elm_j];
                A[first_elm_i, first_elm_j] = A[mini, minj];
                A[mini, minj] = temp;

                // Сброс счётчика 
                min = 9999;

            }
            Console.WriteLine("");
        }

        private static int Max_Elm_In_String(int[,] A)
        {
            int first_max_elm = 0; // первый максимальный элемент
            int arI = 0; // индекс рядка || строки
            int arJ = 0; // индекс столбца
            int arI_out = 0; // индекс строки для красивого вывода в консоль

            for (int i = 0; i < A.GetLength(0); i++)
            {
                for (int j = 0; j < A.GetLength(1); j++)
                {
                    if (first_max_elm < A[i, j] && j == 0)
                    {
                        first_max_elm = A[i, j];
                        arI = i;
                        arJ = j;

                        arI_out = i + 1;
                    }
                }
            }
            Console.WriteLine("");
            Console.WriteLine("Максимальне число: {0} \nРядок: {1}", first_max_elm, arI_out);
            return arI;
        }

        private static int[] Copy_Elm_In_Martix_B(int cols, int[,] A, int arI)
        {
            int[] B = new int[cols];
            for (int i = 0; i < A.GetLength(0); i++)
            {
                for (int j = 0; j < A.GetLength(1); j++)
                {
                    if (j == arI)
                    {
                        B[i] = A[j, i];
                    }
                }
            }
            Console.WriteLine(" ");
            return B;
        }

        private static void Output_Matrix_B(int[] B)
        {
            Console.WriteLine("Вмiст матрицi B:");
            for (int i = 0; i < B.Length; i++)
            {
                Console.Write(B[i] + " ");
            }
        }

        private static void Reverse_Matrix_B(int[] B)
        {
            Console.WriteLine("Вмiст матрицi B пiсля iнвертування:");
            for (int i = 0; i < B.Length; i++)
            {
                Console.Write(B[i] + " ");
            }
        }
    }
}
